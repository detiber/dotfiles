#!/usr/bin/env bash

# Logging stuff.
function e_header()   { echo -e "\n\033[1m$@\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()    { echo -e " \033[1;33m➜\033[0m  $@"; }

# If backups are needed, this is where they'll go.
backup_dir="$HOME/.dotfiles-backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

dotfile_base=~/src/dotfiles

# Based on https://github.com/cowboy/dotfiles/blob/master/bin/dotfiles
function do_stuff() {
  local action=$1
  local target_base=$2
  local files=($3/*)
  local base dest skip

  # Create $target_base if needed
  [ -d "$target_base" ] || mkdir -p "${target_base}"

  # No files? abort.
  if (( ${#files[@]} == 0 )); then return; fi

  # Run _header function only if declared.
  [[ $(declare -f "${action}_header") ]] && "${action}_header"
  # Iterate over files.
  for file in "${files[@]}"; do
    base="$(basename $file)"
    dest="$target_base/$base"
    # Run _test function only if declared.
    if [[ $(declare -f "${action}_test") ]]; then
      # If _test function returns a string, skip file and print that message.
      skip="$("${action}_test" "$file" "$dest")"
      if [[ "$skip" ]]; then
        e_error "Skipping ~/$base, $skip."
        continue
      fi
      # Destination file already exists in ~/. Back it up!
      if [[ -e "$dest" ]]; then
        e_arrow "Backing up ~/$base."
        # Set backup flag, so a nice message can be shown at the end.
        backup=1
        # Create backup dir if it doesn't already exist.
        [[ -e "$backup_dir" ]] || mkdir -p "$backup_dir"
        # Backup file / link / whatever.
        mv "$dest" "$backup_dir"
      fi
    fi
    # Do stuff.
    "${action}_do" "$base" "$file"
  done
}

# Link files.
function link_header() { e_header "Linking files into home directory"; }
function link_test() {
  [[ "$1" -ef "$2" ]] && echo "same file"
}
function link_do() {
  e_success "Linking ~/$1."
  ln -sf ${2#$HOME/} ~/
}

# Link .config files
function clink_header() { e_header "Linking files into ~.config directory"; }
function clink_test() {
  link_test "$1" "$2"
}
function clink_do() {
  e_success "Linking ~/.config/$1."
  ln -sf ${2/$HOME/..} ~/.config/
}

# Link LaunchAgent files
function LaunchAgents_header() { e_header "Linking files into ~/Library/LaunchAgents directory"; }
function LaunchAgents_test() {
  link_test "$1" "$2"
}
function LaunchAgents_do() {
  e_success "Linking ~/Library/LaunchAgents/$1."
  ln -Lf ${2/$HOME/..\/..} ~/Library/LaunchAgents/
}

# Tweak file globbing.
shopt -s dotglob
shopt -s nullglob

platform=$(echo $(uname -s) | tr '[:upper:]' '[:lower:]')

do_stuff "link" "${HOME}" "${dotfile_base}/link"
[ -d "$dotfile_base/$platform/link" ] && do_stuff "link" "${HOME}" "$dotfile_base/$platform/link"

do_stuff "clink" "${HOME}/.config" "${dotfile_base}/clink"
[ -d "$dotfile_base/$platform/clink" ] && do_stuff "clink" "${HOME}/.config" "$dotfile_base/$platform/clink"

[ -d "$dotfile_base/$platform/LaunchAgents" ] && do_stuff "LaunchAgents" "${HOME}/Library/LaunchAgents" "$dotfile_base/$platform/LaunchAgents"

# Alert if backups were made.
if [[ "$backup" ]]; then
  echo -e "\nBackups were moved to ~/${backup_dir#$HOME/}"
fi

# All done!
e_header "All done!"
